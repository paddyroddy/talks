---
author: "[Patrick J. Roddy](https://paddyroddy.github.io)"
date: 2025-06-03
format: revealjs
subtitle: "[ARC Collaborations Hour](https://www.ucl.ac.uk/arc)"
title: Linting Prose with Vale
---

{{< include /_includes/qr-code.qmd >}}

# Introduction

## Talk Motivation

::: {layout="[30,70]"}

::: {#first-column}

![ukrse.slack.com](_figures/slack.png)

:::

[![Datadog](_figures/blog.png){width=80%}](https://www.datadoghq.com/blog/engineering/how-we-use-vale-to-improve-our-documentation-editing-process)

:::

## PhD Thesis

[![GitHub](_figures/phd.png){width=60%}](https://github.com/paddyroddy/phd-thesis)

# Vale

<!-- vale RedHat.TermsWarnings = NO -->

## What is Vale? {data-menu-title="What is Vale? (i)"}

<!-- vale RedHat.TermsWarnings = YES -->

Vale is a command-line tool that brings code-like linting to prose. Vale is
cross-platform, written in Go, and
[available on GitHub](https://github.com/errata-ai/vale).

Vale is not a general-purpose writing aid. It does not teach you how to write;
it is a tool for writers.

Vale focuses (primarily) on the style of writing rather than its grammatical
correctness: making it fundamentally different from, for example,
[Grammarly](https://www.grammarly.com).

## What is Vale? {data-menu-title="What is Vale? (ii)"}

::: {layout="[40,60]"}

::: {#first-column}

Vale focuses on ensuring consistency across many authors (according to
customisable guidelines) rather than the general "correctness" of a single
author's work.

:::

![vale.sh](_figures/consistency.png)

:::

## What is Vale? {data-menu-title="What is Vale? (iii)"}

::: {layout="[40,60]"}

::: {#first-column}

One of Vale's most important features is its ability to support external styles
through its extension system, which only requires some familiarity with the YAML
file format (and, optionally, regular expressions).

:::

![vale.sh](_figures/customisable.png)

:::

## Example Rule

```{.yaml code-line-numbers="1-4|5-6|7-9|10-21"}
# `extends` specifies the extension point you're using. Here, we're
# using `substitution` to ensure correct usage of some technical and
# brand-specific terminology.
extends: substitution
# `message` allows you to customize the output shown to your users.
message: Use '%s' instead of '%s'.
# We're setting this rule's severity to `error`, which will cause
# CI builds to fail.
level: error
# We're using case-insensitive patterns.
ignorecase: true
swap:
  "(?:LetsEncrypt|Let's Encrypt)": Let's Encrypt
  'node[.]?js': Node.js
  'Post?gr?e(?:SQL)': PostgreSQL
  'java[ -]?scripts?': JavaScript
  linode cli: Linode CLI
  linode manager: Linode Manager
  linode: Linode
  longview: Longview
  nodebalancer: NodeBalancer
```

## Contextual Support

::: {layout-ncol=2}

::: {#first-column}

This level of understanding gives you fine-grained control over the linting
process. This includes the ability to limit rules to certain sections (e.g. only
headings) or ignore sections entirely (block and inline code are ignored by
default).

:::

![vale.sh](_figures/markdown.png)

:::

<!-- vale RedHat.TermsWarnings = NO -->

## Tech Stack {data-menu-title="Tech Stack? (i)"}

<!-- vale RedHat.TermsWarnings = YES -->

Vale is a 100% open source, MIT-licensed project that consists of many parts:

| Name    | Tech |                                                                                    Info |
| ------- | :--- | --------------------------------------------------------------------------------------: |
| vale    | Go   |                         The main repository containing the Vale command-line interface. |
| vale-ls | Rust | An implementation of the Language Server Protocol (LSP) for the Vale command-line tool. |

## Tech Stack {data-menu-title="Tech Stack? (ii)"}

| Name        | Tech       |                                                                            Info |
| ----------- | :--------- | ------------------------------------------------------------------------------: |
| vale.sh     | Svelte     |                Website and documentation for the Vale CLI and related projects. |
| vale-action | TypeScript | The official GitHub Action for Vale -- install, manage, and run Vale with ease. |

## Tech Stack {data-menu-title="Tech Stack? (iii)"}

| Name        | Tech |                                                                                                         Info |
| ----------- | :--- | -----------------------------------------------------------------------------------------------------------: |
| packages    | YAML |                               A collection of pre-packaged, Vale-compatible style guides and configurations. |
| vale-native | Go   | A native messaging host for the Vale CLI: Use your local configurations in Chrome, Firefox, Opera, and Edge. |

# Setting Up

<!-- vale RedHat.TermsWarnings = NO -->

## `.vale.ini` {data-menu-title=".vale.ini (i)"}

<!-- vale RedHat.TermsWarnings = YES -->

```{.yaml code-line-numbers="1-2|4-7|8-11"}
# Core settings appear at the top
# (the "global" section).

[formats]
# Format associations appear under
# the optional "formats" section.

[*]
# Format-specific settings appear
# under a user-provided "glob"
# pattern.
```

Core settings:

| Name       | Type   |                         Description |
| ---------- | :----- | ----------------------------------: |
| StylesPath | string | Path to all Vale-related resources. |

## `.vale.ini` {data-menu-title=".vale.ini (ii)"}

| Name          | Type     |                               Description |
| ------------- | :------- | ----------------------------------------: |
| Packages      | string[] | List of packages to download and install. |
| Vocab         | string[] |             List of vocabularies to load. |
| MinAlertLevel | enum     |           Minimum alert level to display. |
| IgnoredScopes | enum     | List of inline-level HTML tags to ignore. |
| SkippedScopes | enum     |  List of block-level HTML tags to ignore. |

<!-- vale RedHat.TermsWarnings = NO -->

## This Repository {data-menu-title="This Repository (i)"}

<!-- vale RedHat.TermsWarnings = YES -->

The `/.vale.ini` file:

```{.ini}
{{< include ../.vale.ini >}}
```

## This Repository {data-menu-title="This Repository (ii)"}

The `/.gitignore` file:

```{.bash}
# We want to ignore our StylesPath *except* for our local
# `vocabularies/Base` directory.

.github/styles/*
!.github/styles/config/

.github/styles/config/*
!.github/styles/config/vocabularies/

.github/styles/config/vocabularies/*
!.github/styles/config/vocabularies/Base
```

Styles specified in `Packages` can be retrieved by running `vale sync`, hence
the `.gitignore` file.

<!-- vale RedHat.TermsWarnings = NO -->

## Built-In Packages {data-menu-title="Built-In Packages (i)"}

<!-- vale RedHat.TermsWarnings = YES -->

Vale comes with a single built-in style named `Vale` that implements a few
rules: `Spelling`, `Terms`, `Avoid` and `Repetition`.

The following packages can be retrieved with `vale sync`:

- `alex`: An implementation of the guidelines enforced by the alex linter.
- `Google`: An implementation of the Google Developer Documentation Style Guide.
- `Joblint`: An implementation of the guidelines enforced by the Joblint linter.

## Built-In Packages {data-menu-title="Built-In Packages (ii)"}

- `Microsoft`: An implementation of the Microsoft Writing Style Guide.
- `proselint`: An implementation of the guidelines enforced by the proselint
  linter.
- `Readability`: An implementations of many popular "readability" metrics.
- `write-good`: An implementation of the guidelines enforced by the write-good
  linter.

## Custom Rules {footer=false}

More rules can be found at: <https://hyperlint.com/vale/rules>.

`/.github/styles/custom/no-contractions.yml`

```{.yaml}
extends: substitution
message: Use '%s' instead of '%s.'
level: error
ignorecase: true
swap:
  aren't: are not
  can't: cannot
  couldn't: could not
  didn't: did not
  doesn't: does not
  don't: do not
  hasn't: has not
  haven't: have not
  how'll: how will
  how's: how is
  isn't: is not
  it'll: it will
  it's: it is
  shouldn't: should not
  that'll: that will
  that's: that is
  they'll: they will
  they're: they are
  wasn't: was not
  we'll: we will
  we're: we are
  we've: we have
  weren't: were not
  what'll: what will
  what's: what is
  when'll: when will
  when's: when is
  where'll: where will
  where's: where is
  who'll: who will
  who's: who is
  why'll: why will
  why's: why is
  won't: will not
  you're: you are
```

## GitHub Action

One might be happy to accept warnings and therefore it does not make sense to
run as a pre-commit hook.

```{.yaml code-line-numbers="1-4|5-6|8-9|8-11|8-12|8-15"}
jobs:
  lint-prose:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Run Vale
        uses: errata-ai/vale-action@d89dee975228ae261d22c15adcd03578634d429c # v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          fail_on_error: true
          filter_mode: nofilter
          reporter: github-pr-review
```

# Demo

<!-- vale RedHat.TermsWarnings = NO -->

## This Repo {data-menu-title="This Repo (i)"}

<!-- vale RedHat.TermsWarnings = YES -->

[paddyroddy/talks#80](https://github.com/paddyroddy/talks/pull/80/files)

![GitHub](_figures/demo1.png)

## This Repo {data-menu-title="This Repo (ii)"}

[paddyroddy/talks#82](https://github.com/paddyroddy/talks/pull/82/files)

![GitHub](_figures/demo2.png)

## This Repo {data-menu-title="This Repo (iii)"}

[paddyroddy/talks#79](https://github.com/paddyroddy/talks/pull/79/files)

![GitHub](_figures/demo3.png)

## ARC Example

<!-- vale RedHat.TermsWarnings = NO -->

[UCL-ARC/python-tooling#541](https://github.com/UCL-ARC/python-tooling/pull/541)

<!-- vale RedHat.TermsWarnings = YES -->

![GitHub](_figures/demo4.png)

# Conclusions

## {data-menu-title="Summary"}

- Vale is a tool used during my PhD to enforce consistent writing styles.
- Had used it for LaTeX (which has fewer built in tools), but in reality it is
  designed for Markdown and so on.
- Brings code-like linting to prose.
- Extensive set of community written rules (some taken from big company style
  guides).
- Can easily write your own rules through regex or a mapping.
- Can turn off rules (`Vale.Spelling = NO`) in `.vale.ini` or inline.

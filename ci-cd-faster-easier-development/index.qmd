---
# TODO: update with actual subgroup link
author:
  "[DevOps
  Subgroup](https://www.ucl.ac.uk/advanced-research-computing/our-people-0)"
date: 2024-09-10
format: revealjs
subtitle: "[ARC Collaborations Hour](https://www.ucl.ac.uk/arc)"
title: "CI/CD: Faster, Easier Development"
---

{{< include /_includes/qr-code.qmd >}}

# CI/CD vs DevOps

## Continuous Integration (CI)

- Definition: Practice of frequently merging code changes into a central
  repository
- Goal: Detect and address integration issues early
- Key practices:
  - Automated building and testing of code
  - Frequent code commits
  - Rapid feedback on code quality

## Continuous Delivery/Deployment (CD)

- Continuous Delivery:
  - Automatically prepare code for release to production
  - Manual decision for final deployment
- Continuous Deployment:
  - Automatically deploy code changes to production
  - No manual intervention required
- Goal: Reduce time between writing code and its use in production

## DevOps {data-menu-title="DevOps (i)"}

:::{layout-ncol=2}

I previously gave talk on a general overview of DevOps
<https://paddyroddy.github.io/talks/devops-an-introduction>

{{< qrcode https://paddyroddy.github.io/talks/devops-an-introduction
colorDark="#ffffff" colorLight="#000000" height=550 width=550 >}}

:::

## DevOps {data-menu-title="DevOps (ii)"}

- Definition: Cultural and professional movement that aims to unify software
  development (Dev) and IT operations (Ops)
- Scope: Broader, encompasses entire software delivery
- Key aspects:
  - Cultural change: Breaking down silos between teams
  - Automation: Throughout the entire software lifecycle
  - Measurement: Continuous monitoring and feedback
  - Sharing: Increased collaboration and shared responsibility

## Relationship Between CI/CD & DevOps

- CI/CD are _practices_ within the broader DevOps _philosophy_
- DevOps often employs CI/CD as key tools, but also includes:
  - Infrastructure as Code
  - Configuration Management
  - Monitoring and Logging
  - Incident Response

## Key Differences {data-menu-title="DevOps (i)"}

1. Scope:
   - CI/CD: Focused on automating specific parts of the development pipeline
   - DevOps: Holistic approach to the entire software delivery lifecycle
2. Cultural Aspect:
   - CI/CD: Primarily technical practices
   - DevOps: Emphasises cultural change and cross-functional collaboration

## Key Differences {data-menu-title="DevOps (i)"}

3. Goals:
   - CI/CD: Faster, more reliable software releases
   - DevOps: Improved overall organisational efficiency and product quality

- While CI/CD are crucial components of DevOps, CI/CD alone isn't DevOps. True
  DevOps requires a broader cultural and operational shift.

# GitHub Actions

## GitHub Actions {data-menu-title="GitHub Actions (i)"}

```{.yaml code-line-numbers="1|2|3|4|4-5|4-6|4-8|4-7,9|4-7,10|4-7,11-12|4-7,13|4-7,14|4-7,15-17|4-7,18"}
name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
```

Demo: <https://docs.github.com/en/actions/writing-workflows/quickstart>

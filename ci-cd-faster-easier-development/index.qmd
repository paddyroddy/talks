---
# TODO: update with actual subgroup link
author:
  "[DevOps
  Subgroup](https://www.ucl.ac.uk/advanced-research-computing/our-people-0)"
date: 2024-09-10
format: revealjs
subtitle: "[ARC Collaborations Hour](https://www.ucl.ac.uk/arc)"
title: "CI/CD: Faster, Easier Development"
---

{{< include /_includes/qr-code.qmd >}}

# CI/CD vs DevOps

## Continuous Integration (CI)

- Definition: Practice of frequently merging code changes into a central
  repository
- Goal: Detect and address integration issues early
- Key practices:
  - Automated building and testing of code
  - Frequent code commits
  - Rapid feedback on code quality

## Continuous Delivery/Deployment (CD)

- Continuous Delivery:
  - Automatically prepare code for release to production
  - Manual decision for final deployment
- Continuous Deployment:
  - Automatically deploy code changes to production
  - No manual intervention required
- Goal: Reduce time between writing code and its use in production

## DevOps {data-menu-title="DevOps (i)"}

:::{layout-ncol=2}

I previously gave talk on a general overview of DevOps
<https://paddyroddy.github.io/talks/devops-an-introduction>

{{< qrcode https://paddyroddy.github.io/talks/devops-an-introduction
colorDark="#ffffff" colorLight="#000000" height=550 width=550 >}}

:::

## DevOps {data-menu-title="DevOps (ii)"}

- Definition: Cultural and professional movement that aims to unify software
  development (Dev) and IT operations (Ops)
- Scope: Broader, encompasses entire software delivery
- Key aspects:
  - Cultural change: Breaking down silos between teams
  - Automation: Throughout the entire software lifecycle
  - Measurement: Continuous monitoring and feedback
  - Sharing: Increased collaboration and shared responsibility

## Relationship Between CI/CD & DevOps

- CI/CD are _practices_ within the broader DevOps _philosophy_
- DevOps often employs CI/CD as key tools, but also includes:
  - Infrastructure as Code
  - Configuration Management
  - Monitoring and Logging
  - Incident Response

## Key Differences {data-menu-title="DevOps (i)"}

- Scope:
  - CI/CD: Focused on automating specific parts of the development pipeline
  - DevOps: Holistic approach to the entire software delivery lifecycle
- Cultural Aspect:
  - CI/CD: Primarily technical practices
  - DevOps: Emphasises cultural change and cross-functional collaboration

## Key Differences {data-menu-title="DevOps (ii)"}

- Goals:
  - CI/CD: Faster, more reliable software releases
  - DevOps: Improved overall organisational efficiency and product quality

::: {.fragment .fade-left}

While CI/CD are crucial components of DevOps, CI/CD alone isn't DevOps. True
DevOps requires a broader cultural and operational shift.

:::

# GitHub Actions

## What Are GitHub Actions? {data-menu-title="What Are GitHub Actions? (i)"}

GitHub Actions is a continuous integration and continuous delivery (CI/CD)
platform that allows you to automate your build, test, and deployment pipeline.
You can create workflows that build and test every pull request to your
repository, or deploy merged pull requests to production.

1. Workflows: Automated processes that you set up in your repository to build,
   test, package, release, or deploy your project.
2. Jobs: A set of steps that execute on the same runner. By default, a workflow
   with multiple jobs will run those jobs in parallel.

## What Are GitHub Actions? {data-menu-title="What Are GitHub Actions? (ii)"}

3. Steps: An individual task that can run commands or actions. Each step in a
   job executes on the same runner, allowing the actions in that job to share
   data with each other.
4. Actions: Standalone commands that are combined into steps to create a job.
   Actions are the smallest portable building block of a workflow.
5. Runners: A server that runs your workflows when they're triggered. Each
   runner can run a single job at a time.

## Workflow Syntax

Workflows are defined in YAML files in the `.github/workflows` directory of your
repository. Here's a basic structure:

```{.yaml code-line-numbers="1|3|5|5-6|5-7|5-8|5-8,9|5-8,10-11"}
name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run a one-line script
        run: echo Hello, world!
```

## Example Uses {data-menu-title="Example Uses (i)"}

- Continuous Integration: Automatically build and test your code every time you
  push to your repository or open a pull request.
- Continuous Deployment: Automatically deploy your application to staging or
  production environments when specific conditions are met.
- Automated Testing: Run your test suite on multiple platforms and versions of
  your programming language.

## Example Uses {data-menu-title="Example Uses (ii)"}

- Code Linting and Formatting: Enforce coding standards across your project.
- Issue and PR Management: Automatically label, close, or comment on issues and
  pull requests based on certain conditions.
- Scheduled Tasks: Run tasks at specific times, like daily backups or weekly
  report generation.

## Benefits

- Integrated with GitHub: No need for external CI/CD tools.
- Matrix Builds: Easily test across multiple operating systems and runtime
  versions.
- Community Actions: Reuse and share actions from the GitHub community.
- Flexible: Build custom workflows for any project or git repository.

## Best Practices

- Use secrets for sensitive information
- Keep your actions versioned
- Minimise workflow run time by using build matrices and caching
- Use status badges in your README to show your workflow status

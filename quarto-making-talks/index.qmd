---
author: "[Patrick J. Roddy](https://paddyroddy.github.io)"
date: 2025-09-02
format: revealjs
subtitle: "[ARC Collaborations Hour](https://www.ucl.ac.uk/arc)"
title: "Quarto: Making Talks"
---

{{< include /_includes/qr-code.qmd >}}

# Talk Motivation

<!-- vale RedHat.TermsWarnings = NO -->

## {data-menu-title="Talk Motivation (i)"}

<!-- vale RedHat.TermsWarnings = YES -->

- Always found making presentations tedious.
- Prefer non-[WYSIWYG](https://en.wikipedia.org/wiki/WYSIWYG) editors since
  discovering LaTeX.
- [LaTeX Beamer](https://www.overleaf.com/learn/latex/Beamer) presentations are
  heavy duty and look rubbish.
- Wanted to be able to version control my slides.
- Was never sure where to store my slides.
- No real record of my talks, so little motivation to give them.
- Quarto allows me to make lightweight, distributable slides that look great.

## {data-menu-title="Talk Motivation (ii)" footer=false}

Promised this talk before.

```{=html}
<iframe
    height="550"
    src="https://paddyroddy.github.io/talks/pyopensci-my-experience/#/5"
    title="Earlier Talk"
    width="1000"
>
</iframe>
```

# Quarto

<!-- vale RedHat.TermsWarnings = NO -->

## What is Quarto {data-menu-title="What is Quarto (i)"}

<!-- vale RedHat.TermsWarnings = YES -->

An open source scientific and technical publishing system

[![Quarto](figures/quarto.jpg)](https://quarto.org)

## What is Quarto {data-menu-title="What is Quarto (ii)"}

- Author using `Jupyter` notebooks or with plain text markdown in your favourite
  editor.
- Create dynamic content with `Python`, `R`, `Julia`, and `Observable`.
- Publish reproducible, production quality articles, presentations, dashboards,
  websites, blogs, and books in `HTML`, `PDF`, `Microsoft Word`, `ePub`, and
  more.

## What is Quarto {data-menu-title="What is Quarto (iii)"}

- Share knowledge and insights organisation-wide by publishing to
  `Posit Connect`, `Confluence`, or other publishing systems.
- Write using `Pandoc` markdown, including equations, citations, crossrefs,
  figure panels, callouts, advanced layout, and more.

<!-- vale RedHat.TermsWarnings = NO -->

## Why Quarto for Presentations {data-menu-title="Why Quarto for Presentations (i)"}

<!-- vale RedHat.TermsWarnings = YES -->

- _Markdown Simplicity_: Write slides using intuitive Markdown syntax.
- _Code Integration_: Seamlessly embed and run code (R, Python, and so on)
  directly in your slides, displaying both code and output.
- _Reproducibility_: Your entire presentation, including analyses and
  visualisations, is reproducible from its source.

## Why Quarto for Presentations {data-menu-title="Why Quarto for Presentations (ii)"}

- _Dynamic Content_: Easily include plots, tables, and even interactive elements
  generated by your code.
- _Customisation_: Extensive options for styling, themes, and layouts.
- _Open Source_: Free to use and backed by a vibrant community.

## Traditional Presentation Tools

::: {layout-ncol="2"}

::: {#first-column}

PowerPoint/Google Slides

- Manual copy-pasting of figures/tables.
- Updates requires manual changes in many places.
- Limited version control.
- Limited integration with code execution.
- Proprietary formats.

:::

::: {.fragment .fade-left}

Quarto `reveal.js`

- Automated generation of figures/tables.
- One source file for content and code.
- Git-friendly plain text files..
- Live code execution.
- Open standard for universal access.

:::

:::

## `reveal.js`

::: {layout="[20,80]"}

[![](figures/revealjs.svg)](https://revealjs.com)

- Quarto leverages `reveal.js`, a powerful HTML presentation framework.
- Provides smooth transitions, animations, and interactive features by default.
- Browser-based: easy to share and view on any device with a web browser.
- Supports many navigation modes (linear, vertical stacks).
- Plugins and extensibility for advanced functionalities.

:::

## Core Quarto Concepts

- _`.qmd` file_: The source file (Quarto Markdown Document).
- _YAML Header_: Configuration settings (title, and so on).
- _Markdown_: For text, headings, lists, images, links.
- _Code Chunks_: For example `{python}` for executable code.
- _Rendering_: Converting the `.qmd` file to the output format
  (`quarto render my-slides.qmd`).
- _Themes_: Predefined visual styles for your presentation.
- _Fragments_: Revealing content incrementally on a slide.

## Benefits: Audience and Presenter

::: {layout-ncol="2"}

::: {#first-column}

Audience

- Engaging and dynamic presentations.
- Clear and consistent visuals.
- Reproducible results if shared (for example, accompanying code).
- Accessible (can be viewed in any browser).

:::

::: {.fragment .fade-left}

Presenter

- Streamlined workflow for data-driven talks.
- Reduced manual effort and errors.
- Easy version control and collaboration.
- Flexibility to output to other formats from the same source.

:::

:::

# Repository Contents

My setup. In the order the repository files appear on GitHub. Most of these are
optional unless you are a fellow pedant.

## `/.github/workflows/add-to-project.yaml` {footer=false}

GitHub Action to add issues to project board.

<!-- prettier-ignore-start -->
````{.yaml}
{{< include /.github/workflows/add-to-project.yaml >}}
````
<!-- prettier-ignore-end -->

## `/.github/workflows/links.yaml`

GitHub Action to perform link checking with [lychee](https://lychee.cli.rs).

<!-- prettier-ignore-start -->
````{.yaml}
{{< include /.github/workflows/links.yaml >}}
````
<!-- prettier-ignore-end -->

## `/.github/workflows/linting.yaml` {footer=false}

GitHub Action to perform linting with [pre-commit](https://pre-commit.com) and
[Vale](https://vale.sh).

<!-- prettier-ignore-start -->
````{.yaml}
{{< include /.github/workflows/linting.yaml >}}
````
<!-- prettier-ignore-end -->

## `/.github/workflows/publish.yaml`

GitHub Action to publish the Quarto website to GitHub Pages.

<!-- prettier-ignore-start -->
````{.yaml}
{{< include /.github/workflows/publish.yaml >}}
````
<!-- prettier-ignore-end -->

## `/_extensions/`

Extensions are a powerful way to change and extend the behaviour of Quarto. Can
be installed with `quarto add <extension>`, which must be committed to the
repository. Extensions can be updated through `quarto update <extension>`.

- [jmbuhr/qrcode](https://github.com/jmbuhr/quarto-qrcode): provides shortcodes
  for [qrcodejs](https://davidshimjs.github.io/qrcodejs) in Quarto.
- [quarto-ext/fontawesome](https://github.com/quarto-ext/fontawesome): provides
  support including free icons provided by
  [Font Awesome](https://fontawesome.com).

## `/_filters/slugify.lua`

If the base features of Pandoc and Quarto do not do exactly what you need, you
can likely create a [Pandoc Filter](https://pandoc.org/filters.html) that
bridges the gap. This filter slugifies the given title to be used within a URL.

<!-- prettier-ignore-start -->
````{.lua}
{{< include /_filters/slugify.lua >}}
````
<!-- prettier-ignore-end -->

## `/_includes/qr-code.qmd`

This snippet is included at the start of every presentation with
`{{{< /_includes/qr-code.qmd >}}}`.

`````{python}
#| output: asis
"""Used Python to escape the shortcode command to avoid processing."""

import re

with open("../_includes/qr-code.qmd") as f:
    contents = f.read()
    escaped = re.sub(r"\{\{< qrcode(.*?)>\}\}", r"{{{< qrcode\1>}}}", contents)
    print(f"````{{.markdown}}\n{escaped}\n````")
`````

## `/assets/images/favicon.ico`

Specified in the Quarto configuration, a favicon is a small icon that serves as
branding for your website.

![<https://paddyroddy.github.io>](/assets/images/favicon.ico)

## `/.gitignore`

Ignore standard Quarto and Vale files.

<!-- prettier-ignore-start -->
````{.bash}
{{< include /.gitignore >}}
````
<!-- prettier-ignore-end -->

## `/.pre-commit-config.yaml`

My
[custom pre-commit hooks](https://github.com/paddyroddy/.github/blob/main/precommit/general/general-hooks.yaml).
They include: `adrienverge/yamllint`, `crate-ci/typos`,
`igorshubovych/markdownlint-cli`, `JohnnyMorganz/StyLua`,
`Lucas-C/pre-commit-hooks`, `pappasam/toml-sort`, `pre-commit/pre-commit-hooks`,
`rbubley/mirrors-prettier`, `rhysd/actionlint`, `shellcheck-py/shellcheck-py`.

<!-- prettier-ignore-start -->
````{.yaml}
{{< include /.pre-commit-config.yaml >}}
````
<!-- prettier-ignore-end -->

## `/.prettierrc.yaml`

Configures [Prettier](https://prettier.io) to treat Quarto files as Markdown.

<!-- prettier-ignore-start -->
````{.yaml}
{{< include /.prettierrc.yaml >}}
````
<!-- prettier-ignore-end -->

## `/.renovaterc.json5`

Inherits my
[custom Renovate configuration](https://github.com/paddyroddy/.github/blob/main/renovate/default-config.json5).
See my earlier
[talk on Renovate](https://paddyroddy.github.io/talks/renovate-automating-dependency-management).

<!-- prettier-ignore-start -->
````{.json}
{{< include /.renovaterc.json5 >}}
````
<!-- prettier-ignore-end -->

## `/.typos.toml`

Configures known exemptions from the [typos](https://github.com/crate-ci/typos)
spell checker.

<!-- prettier-ignore-start -->
````{.toml}
{{< include /.typos.toml >}}
````
<!-- prettier-ignore-end -->

## `/.vale.ini` {footer=false}

My Vale configuration to lint prose. See my earlier
[talk on Vale](https://paddyroddy.github.io/talks/linting-prose-with-vale).

<!-- prettier-ignore-start -->
````{.ini}
{{< include /.vale.ini >}}
````
<!-- prettier-ignore-end -->

## `/404.qmd`

A [HTTP 404](https://en.wikipedia.org/wiki/HTTP_404) page for the Quarto
website.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include /404.qmd >}}
````
<!-- prettier-ignore-end -->

## `/LICENCE.txt` {footer=false}

`Creative Commons Attribution Share Alike 4.0 International` licence.

<!-- prettier-ignore-start -->
````{.text}
{{< include /LICENCE.txt >}}
````
<!-- prettier-ignore-end -->

## `/README.md`

The repository `README`, needs some workâ€¦

<!-- prettier-ignore-start -->
````{.markdown}
{{< include /README.md >}}
````
<!-- prettier-ignore-end -->

## `/_quarto.yaml` {footer=false}

Any document rendered within the project directory will automatically inherit
the metadata defined at the project level.

<!-- Here explicitly to avoid processing of the shortcode commands -->

`````{python}
#| output: asis
"""Used Python to escape the shortcode command to avoid processing."""

with open("../_quarto.yaml") as f:
    contents = f.read()
    escaped = contents.replace("{{< meta title >}}", "{{{< meta title >}}}")
    print(f"````{{.yaml}}\n{escaped}\n````")
`````

## `/index.qmd` {footer=false}

[Listings](https://quarto.org/docs/websites/website-listings.html) automatically
generate the contents of a page from a list of Quarto documents or other custom
data.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include /index.qmd >}}
````
<!-- prettier-ignore-end -->

## `/requirements.txt`

Some talks include
[executable programs](https://quarto.org/docs/visual-editor/technical.html#code-chunks).
These are the dependencies for some Python code.

<!-- prettier-ignore-start -->
````{.text}
{{< include /requirements.txt >}}
````
<!-- prettier-ignore-end -->

# Demo

Will show some Quarto code and then display it on the neighbouring slide. These
have not been crafted specifically for this talk, they were seen in my other
talks.

## Title Slide

Each talk must start with some YAML front matter metadata. Note that the listing
specified in `/index.qmd` mapped `subtitle` to `Events`.

```{.yaml}
---
author: "[Patrick J. Roddy](https://paddyroddy.github.io)"
date: 2025-09-02
format: revealjs
subtitle: "[ARC Collaborations Hour](https://www.ucl.ac.uk/arc)"
title: "Quarto: Making Talks"
---
```

Sections are then made with `#` and slides are made with `##`.

## Figures

Figures are included using the standard Markdown pattern.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include _slides/figures.qmd >}}
````
<!-- prettier-ignore-end -->

## {visibility="uncounted"}

{{< include _slides/figures.qmd >}}

## Lists

Lists are included using the standard Markdown pattern. The `incremental: true`
settings means they show one-by-one.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include _slides/lists.qmd >}}
````
<!-- prettier-ignore-end -->

## {visibility="uncounted"}

{{< include _slides/lists.qmd >}}

## Code Blocks {footer=false}

Code blocks can have fenced code blocks syntax highlighted in the usual way. The
`code-line-numbers` option allows for control of what numbers you want your
audience to follow.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include _slides/code-blocks.qmd >}}
````
<!-- prettier-ignore-end -->

## {visibility="uncounted"}

{{< include _slides/code-blocks.qmd >}}

## Footers

You can control the footer for a single slide as follows.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include _slides/footers.qmd >}}
````
<!-- prettier-ignore-end -->

## {visibility="uncounted"}

{{< include _slides/footers.qmd >}}

## Fragments {footer=false}

Fragments are used to highlight or incrementally reveal individual elements on a
slide.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include _slides/fragments.qmd >}}
````
<!-- prettier-ignore-end -->

## {visibility="uncounted"}

{{< include _slides/fragments.qmd >}}

## Columns

Columns can be made using `layout-ncol` or the `layout` we saw earlier in the QR
code slide.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include _slides/columns.qmd >}}
````
<!-- prettier-ignore-end -->

## {visibility="uncounted"}

{{< include _slides/columns.qmd >}}

## Flowcharts

Flowcharts can be made with [Mermaid](https://mermaid.js.org).

<!-- prettier-ignore-start -->
````{.markdown}
{{< include _slides/flowcharts.qmd >}}
````
<!-- prettier-ignore-end -->

## {visibility="uncounted"}

{{< include _slides/flowcharts.qmd >}}

## Quotes

Standard Markdown quoting.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include _slides/quotes.qmd >}}
````
<!-- prettier-ignore-end -->

## {visibility="uncounted"}

{{< include _slides/quotes.qmd >}}

## Checkboxes

Standard Markdown checkboxes.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include _slides/checkboxes.qmd >}}
````
<!-- prettier-ignore-end -->

## {visibility="uncounted"}

{{< include _slides/checkboxes.qmd >}}

## Running Code {footer=false}

Can embed and run code to do all kinds of things. This example generates an
interactive map by using the Python package
[ipyleaflet](https://ipyleaflet.readthedocs.io).

`````{python}
#| output: asis
"""Used Python to avoid the code being executed before being displayed."""

with open("_slides/running-code.qmd") as f:
    contents = f.read()
    print(f"````{{.markdown}}\n{contents}\n````")
`````

## {visibility="uncounted"}

{{< include _slides/running-code.qmd >}}

## Website Previews

Websites can be previewed as follows.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include _slides/website-previews.qmd >}}
````
<!-- prettier-ignore-end -->

## {visibility="uncounted"}

{{< include _slides/website-previews.qmd >}}

## Stack Layout

This example shows how to stack figures on top of each other.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include _slides/stack-layout.qmd >}}
````
<!-- prettier-ignore-end -->

## {visibility="uncounted"}

{{< include _slides/stack-layout.qmd >}}

## Tables

Standard markdown tables.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include _slides/tables.qmd >}}
````
<!-- prettier-ignore-end -->

## {visibility="uncounted"}

{{< include _slides/tables.qmd >}}

## Callouts

Can include GitHub Markdown-like callouts.

<!-- prettier-ignore-start -->
````{.markdown}
{{< include _slides/callouts.qmd >}}
````
<!-- prettier-ignore-end -->

## {visibility="uncounted"}

{{< include _slides/callouts.qmd >}}

# Conclusions

## {data-menu-title="Summary"}

- Quarto combines Pandoc and Markdown syntax.
- Can present slides in the browser or export them as PDF and so on.
- Can extend functionality with extensions or write your own custom filters.
- Can display code line-by-line and even run code in presentations.
- Can re-use slides within a presentation.
- Easy to start, takes a little time to perfect.
- More fun.
